# -*- coding: utf-8 -*-
"""COVID-19 Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NG8pQDaulYknKZAVOXexoj1VPXFZAbuR
"""

import pandas as pd
import keras
from keras.models import Sequential 
import numpy as np
from PIL import Image
import PIL
from tqdm import tqdm
import matplotlib.pyplot as plt
from skimage import color
from skimage import io
import cv2
import tensorflow as tf
tf.version.VERSION
from keras.utils import np_utils
import matplotlib.pyplot as plt

from keras.models import load_model
from keras.layers import Dense, Dropout, Flatten, Conv2D
from keras.models import Sequential


from google.colab import files
from google.colab import drive
from keras.preprocessing.image import ImageDataGenerator 


from keras.preprocessing import image

from keras.layers import MaxPooling2D

path= "/content/drive/MyDrive/TrainDataV2.csv"
df= pd.read_csv(path)
df=df[:6000]

df.tail()

image_id = df["X_ray_image_name"]

train_label = df["Label"]

train_label.head()

X_train=[]

for i in tqdm(image_id):
  
 path= PIL.Image.open("/content/drive/MyDrive/COVIDFINAL/train/" +i).convert('L')
 path=path.resize((160,160))

 path= np.asarray(path)
 path=path/255

 X_train.append(path)


 
  #image= np.reshape(image,(256,256,-1))
  #X_train.append(image)

X_train= np.asarray(X_train)

X_train.shape

y_train= np.asarray(pd.get_dummies(train_label, sparse=True))
Y_train=np_utils.to_categorical(y_train)

model = Sequential()
model.add(Conv2D(input_shape=(160,160,1),filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(Conv2D(filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.25))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.25))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.25))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.25))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(units=4096,activation="relu"))
model.add(Dropout(0.25))
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=2, activation="softmax"))


#model = Sequential()
#model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(160,160,1)))
#model.add(Conv2D(64,(3,3),activation='relu'))
#model.add(MaxPooling2D(pool_size=(2,2)))
#model.add(Dropout(0.25))

#model.add(Conv2D(64,(3,3),activation='relu'))
#model.add(MaxPooling2D(pool_size=(2,2)))
#model.add(Dropout(0.25))

#model.add(Conv2D(128,(3,3),activation='relu'))
#model.add(MaxPooling2D(pool_size=(2,2)))
#model.add(Dropout(0.25))

#model.add(Flatten())
#model.add(Dense(64,activation='relu'))
#model.add(Dropout(0.5))
#model.add(Dense(2,activation='sigmoid'))

model.compile(loss="categorical_crossentropy",optimizer='adam',metrics=['accuracy'])

model.summary()

model.compile(optimizer="adam", loss="categorical_crossentropy",metrics=["accuracy"])

X_train.shape

y_train.shape

from keras.callbacks import ModelCheckpoint
checkpoint = ModelCheckpoint('model-{epoch:03d}.h5',monitor='val_loss',verbose=0,save_best_only=True,mode='auto',save_weights_only=True)
history=model.fit(X_train,y_train,epochs=10,callbacks=[checkpoint],validation_split=0.1)

model.save("/content/model-001.h5")

COVID_Detection_Model = keras.models.load_model("/content/model-001.h5")

random_seed = np.random.randint(5285)
print(random_seed)
id_of_image = df["X_ray_image_name"][random_seed]
label_of_image = df["Label"][random_seed]

image = Image.open("/content/drive/MyDrive/COVIDFINAL/train/" + id_of_image)
image_for_pred = np.asarray(image.resize((160,160)))
image_for_pred = np.reshape(image_for_pred,((1,160,160,1)))
image_for_pred = image_for_pred / 255
prediction = COVID_Detection_Model(image_for_pred)
a = np.argmax(prediction)
b = np.amax(prediction)

if (a == 0):
    print("No Covid Detected. Confidence is: " + str(b*100) + "%")
    if (label_of_image == 0):
        print("True answer is: No Covid")
    else:
        print("True answer is: Covid is there")
else:
    print("Covid Detected. Confidence is: " + str(b*100) + "%")
    if (label_of_image == 0):
        print("True answer is: No COVID")
    else:
        print("True answer is: COVID is there")